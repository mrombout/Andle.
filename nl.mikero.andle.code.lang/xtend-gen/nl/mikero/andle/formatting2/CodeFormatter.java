/**
 * generated by Xtext 2.13.0
 */
package nl.mikero.andle.formatting2;

import Code.Branch;
import Code.Script;
import Code.Statement;
import com.google.inject.Inject;
import java.util.Arrays;
import nl.mikero.andle.services.CodeGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class CodeFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CodeGrammarAccess _codeGrammarAccess;
  
  protected void _format(final Script script, @Extension final IFormattableDocument document) {
    EList<Statement> _statements = script.getStatements();
    for (final Statement statement : _statements) {
      document.<Statement>format(statement);
    }
  }
  
  protected void _format(final Branch branch, @Extension final IFormattableDocument document) {
    EList<Statement> _ifTrue = branch.getIfTrue();
    for (final Statement statement : _ifTrue) {
      document.<Statement>format(statement);
    }
    EList<Statement> _ifFalse = branch.getIfFalse();
    for (final Statement statement_1 : _ifFalse) {
      document.<Statement>format(statement_1);
    }
  }
  
  public void format(final Object branch, final IFormattableDocument document) {
    if (branch instanceof XtextResource) {
      _format((XtextResource)branch, document);
      return;
    } else if (branch instanceof Branch) {
      _format((Branch)branch, document);
      return;
    } else if (branch instanceof Script) {
      _format((Script)branch, document);
      return;
    } else if (branch instanceof EObject) {
      _format((EObject)branch, document);
      return;
    } else if (branch == null) {
      _format((Void)null, document);
      return;
    } else if (branch != null) {
      _format(branch, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(branch, document).toString());
    }
  }
}

/*
 * generated by Xtext 2.13.0
 */
package nl.mikero.andle.serializer;

import Code.Branch;
import Code.CodePackage;
import Code.Script;
import Code.SetSwitch;
import com.google.inject.Inject;
import java.util.Set;
import nl.mikero.andle.services.CodeGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CodeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CodeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CodePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CodePackage.BRANCH:
				sequence_Branch(context, (Branch) semanticObject); 
				return; 
			case CodePackage.SCRIPT:
				sequence_Script(context, (Script) semanticObject); 
				return; 
			case CodePackage.SET_SWITCH:
				sequence_SetSwitch(context, (SetSwitch) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns Branch
	 *     Branch returns Branch
	 *
	 * Constraint:
	 *     (expression=EString ifTrue+=Statement+ ifFalse+=Statement*)
	 */
	protected void sequence_Branch(ISerializationContext context, Branch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Script returns Script
	 *
	 * Constraint:
	 *     statements+=Statement*
	 */
	protected void sequence_Script(ISerializationContext context, Script semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SetSwitch
	 *     SetSwitch returns SetSwitch
	 *
	 * Constraint:
	 *     (switchName=EString switchState?=EBoolean)
	 */
	protected void sequence_SetSwitch(ISerializationContext context, SetSwitch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CodePackage.Literals.SET_SWITCH__SWITCH_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CodePackage.Literals.SET_SWITCH__SWITCH_NAME));
			if (transientValues.isValueTransient(semanticObject, CodePackage.Literals.SET_SWITCH__SWITCH_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CodePackage.Literals.SET_SWITCH__SWITCH_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetSwitchAccess().getSwitchNameEStringParserRuleCall_2_0(), semanticObject.getSwitchName());
		feeder.accept(grammarAccess.getSetSwitchAccess().getSwitchStateEBooleanParserRuleCall_4_0(), semanticObject.isSwitchState());
		feeder.finish();
	}
	
	
}

/*
 * generated by Xtext 2.13.0
 */
package nl.mikero.andle.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CodeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.mikero.andle.Code.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScriptAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Script:
		//	{Script} statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Script} statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{Script}
		public Action getScriptAction_0() { return cScriptAction_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.mikero.andle.Code.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetSwitchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBranchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	SetSwitch | Branch;
		@Override public ParserRule getRule() { return rule; }
		
		//SetSwitch | Branch
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SetSwitch
		public RuleCall getSetSwitchParserRuleCall_0() { return cSetSwitchParserRuleCall_0; }
		
		//Branch
		public RuleCall getBranchParserRuleCall_1() { return cBranchParserRuleCall_1; }
	}
	public class SetSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.mikero.andle.Code.SetSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetSwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchNameEStringParserRuleCall_2_0 = (RuleCall)cSwitchNameAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSwitchStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSwitchStateEBooleanParserRuleCall_4_0 = (RuleCall)cSwitchStateAssignment_4.eContents().get(0);
		
		//SetSwitch:
		//	{SetSwitch}
		//	'set' switchName=EString 'to' switchState?=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//{SetSwitch} 'set' switchName=EString 'to' switchState?=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{SetSwitch}
		public Action getSetSwitchAction_0() { return cSetSwitchAction_0; }
		
		//'set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//switchName=EString
		public Assignment getSwitchNameAssignment_2() { return cSwitchNameAssignment_2; }
		
		//EString
		public RuleCall getSwitchNameEStringParserRuleCall_2_0() { return cSwitchNameEStringParserRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//switchState?=EBoolean
		public Assignment getSwitchStateAssignment_4() { return cSwitchStateAssignment_4; }
		
		//EBoolean
		public RuleCall getSwitchStateEBooleanParserRuleCall_4_0() { return cSwitchStateEBooleanParserRuleCall_4_0; }
	}
	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.mikero.andle.Code.Branch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionEStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfTrueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfTrueStatementParserRuleCall_5_0 = (RuleCall)cIfTrueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cIfFalseAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cIfFalseStatementParserRuleCall_7_2_0 = (RuleCall)cIfFalseAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Branch:
		//	'if' '(' expression=EString ')' '{'
		//	ifTrue+=Statement+
		//	'}' ('else' '{'
		//	ifFalse+=Statement*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expression=EString ')' '{' ifTrue+=Statement+ '}' ('else' '{' ifFalse+=Statement* '}')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=EString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//EString
		public RuleCall getExpressionEStringParserRuleCall_2_0() { return cExpressionEStringParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//ifTrue+=Statement+
		public Assignment getIfTrueAssignment_5() { return cIfTrueAssignment_5; }
		
		//Statement
		public RuleCall getIfTrueStatementParserRuleCall_5_0() { return cIfTrueStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('else' '{' ifFalse+=Statement* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//ifFalse+=Statement*
		public Assignment getIfFalseAssignment_7_2() { return cIfFalseAssignment_7_2; }
		
		//Statement
		public RuleCall getIfFalseStatementParserRuleCall_7_2_0() { return cIfFalseStatementParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.mikero.andle.Code.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.mikero.andle.Code.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final ScriptElements pScript;
	private final StatementElements pStatement;
	private final SetSwitchElements pSetSwitch;
	private final BranchElements pBranch;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CodeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScript = new ScriptElements();
		this.pStatement = new StatementElements();
		this.pSetSwitch = new SetSwitchElements();
		this.pBranch = new BranchElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.mikero.andle.Code".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Script:
	//	{Script} statements+=Statement*;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//Statement:
	//	SetSwitch | Branch;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SetSwitch:
	//	{SetSwitch}
	//	'set' switchName=EString 'to' switchState?=EBoolean;
	public SetSwitchElements getSetSwitchAccess() {
		return pSetSwitch;
	}
	
	public ParserRule getSetSwitchRule() {
		return getSetSwitchAccess().getRule();
	}
	
	//Branch:
	//	'if' '(' expression=EString ')' '{'
	//	ifTrue+=Statement+
	//	'}' ('else' '{'
	//	ifFalse+=Statement*
	//	'}')?;
	public BranchElements getBranchAccess() {
		return pBranch;
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

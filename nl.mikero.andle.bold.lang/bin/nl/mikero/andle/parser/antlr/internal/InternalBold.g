/*
 * generated by Xtext 2.13.0
 */
grammar InternalBold;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.mikero.andle.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.mikero.andle.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.mikero.andle.services.BoldGrammarAccess;

}

@parser::members {

 	private BoldGrammarAccess grammarAccess;

    public InternalBoldParser(TokenStream input, BoldGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Text";
   	}

   	@Override
   	protected BoldGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleText
entryRuleText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current; }
	EOF;

// Rule Text
ruleText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTextAccess().getTextAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTextAccess().getParagraphsParagraphParserRuleCall_1_0());
				}
				lv_paragraphs_1_0=ruleParagraph
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextRule());
					}
					add(
						$current,
						"paragraphs",
						lv_paragraphs_1_0,
						"nl.mikero.andle.Bold.Paragraph");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleParagraph
entryRuleParagraph returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParagraphRule()); }
	iv_ruleParagraph=ruleParagraph
	{ $current=$iv_ruleParagraph.current; }
	EOF;

// Rule Paragraph
ruleParagraph returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParagraphAccess().getParagraphAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParagraphAccess().getNodesNodeParserRuleCall_1_0());
				}
				lv_nodes_1_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParagraphRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_1_0,
						"nl.mikero.andle.Bold.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_NEWLINE_2=RULE_NEWLINE
		{
			newLeafNode(this_NEWLINE_2, grammarAccess.getParagraphAccess().getNEWLINETerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeAccess().getEmphasisNodeParserRuleCall_0());
		}
		this_EmphasisNode_0=ruleEmphasisNode
		{
			$current = $this_EmphasisNode_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getItalicsNodeParserRuleCall_1());
		}
		this_ItalicsNode_1=ruleItalicsNode
		{
			$current = $this_ItalicsNode_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getPlainTextNodeParserRuleCall_2());
		}
		this_PlainTextNode_2=rulePlainTextNode
		{
			$current = $this_PlainTextNode_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEmphasisNode
entryRuleEmphasisNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmphasisNodeRule()); }
	iv_ruleEmphasisNode=ruleEmphasisNode
	{ $current=$iv_ruleEmphasisNode.current; }
	EOF;

// Rule EmphasisNode
ruleEmphasisNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmphasisNodeAccess().getEmphasisNodeAction_0(),
					$current);
			}
		)
		otherlv_1='**'
		{
			newLeafNode(otherlv_1, grammarAccess.getEmphasisNodeAccess().getAsteriskAsteriskKeyword_1());
		}
		(
			(
				lv_text_2_0=RULE_TEXT_T
				{
					newLeafNode(lv_text_2_0, grammarAccess.getEmphasisNodeAccess().getTextTEXT_TTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEmphasisNodeRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_2_0,
						"nl.mikero.andle.Bold.TEXT_T");
				}
			)
		)
		otherlv_3='**'
		{
			newLeafNode(otherlv_3, grammarAccess.getEmphasisNodeAccess().getAsteriskAsteriskKeyword_3());
		}
	)
;

// Entry rule entryRuleItalicsNode
entryRuleItalicsNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItalicsNodeRule()); }
	iv_ruleItalicsNode=ruleItalicsNode
	{ $current=$iv_ruleItalicsNode.current; }
	EOF;

// Rule ItalicsNode
ruleItalicsNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getItalicsNodeAccess().getItalicsNodeAction_0(),
					$current);
			}
		)
		otherlv_1='__'
		{
			newLeafNode(otherlv_1, grammarAccess.getItalicsNodeAccess().get__Keyword_1());
		}
		(
			(
				lv_test_2_0=RULE_TEXT_T
				{
					newLeafNode(lv_test_2_0, grammarAccess.getItalicsNodeAccess().getTestTEXT_TTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItalicsNodeRule());
					}
					setWithLastConsumed(
						$current,
						"test",
						lv_test_2_0,
						"nl.mikero.andle.Bold.TEXT_T");
				}
			)
		)
		otherlv_3='__'
		{
			newLeafNode(otherlv_3, grammarAccess.getItalicsNodeAccess().get__Keyword_3());
		}
	)
;

// Entry rule entryRulePlainTextNode
entryRulePlainTextNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlainTextNodeRule()); }
	iv_rulePlainTextNode=rulePlainTextNode
	{ $current=$iv_rulePlainTextNode.current; }
	EOF;

// Rule PlainTextNode
rulePlainTextNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPlainTextNodeAccess().getPlainTextNodeAction_0(),
					$current);
			}
		)
		(
			(
				lv_text_1_0=RULE_TEXT_T
				{
					newLeafNode(lv_text_1_0, grammarAccess.getPlainTextNodeAccess().getTextTEXT_TTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPlainTextNodeRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"nl.mikero.andle.Bold.TEXT_T");
				}
			)
		)
	)
;

RULE_TEXT_T : ('a'..'\u00E5'|'A'..'\u00C5'|','|'.') (RULE_ID|RULE_WS)+;

RULE_WS : (' '|'\t')+;

RULE_NEWLINE : '\r'? '\n';

fragment RULE_ID : ('a'..'\u00E5'|'A'..'\u00C5') ('a'..'\u00E5'|'A'..'\u00C5'|'0'..'9'|'!'|'?')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;

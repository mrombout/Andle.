/*
 * generated by Xtext 2.13.0
 */
package nl.mikero.andle.serializer;

import Bold.BoldPackage;
import Bold.EmphasisNode;
import Bold.ItalicsNode;
import Bold.Paragraph;
import Bold.PlainTextNode;
import Bold.Text;
import com.google.inject.Inject;
import java.util.Set;
import nl.mikero.andle.services.BoldGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BoldSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BoldGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BoldPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BoldPackage.EMPHASIS_NODE:
				sequence_EmphasisNode(context, (EmphasisNode) semanticObject); 
				return; 
			case BoldPackage.ITALICS_NODE:
				sequence_ItalicsNode(context, (ItalicsNode) semanticObject); 
				return; 
			case BoldPackage.PARAGRAPH:
				sequence_Paragraph(context, (Paragraph) semanticObject); 
				return; 
			case BoldPackage.PLAIN_TEXT_NODE:
				sequence_PlainTextNode(context, (PlainTextNode) semanticObject); 
				return; 
			case BoldPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Node returns EmphasisNode
	 *     EmphasisNode returns EmphasisNode
	 *
	 * Constraint:
	 *     text=TEXT_T
	 */
	protected void sequence_EmphasisNode(ISerializationContext context, EmphasisNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BoldPackage.Literals.EMPHASIS_NODE__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BoldPackage.Literals.EMPHASIS_NODE__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmphasisNodeAccess().getTextTEXT_TTerminalRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns ItalicsNode
	 *     ItalicsNode returns ItalicsNode
	 *
	 * Constraint:
	 *     test=TEXT_T
	 */
	protected void sequence_ItalicsNode(ISerializationContext context, ItalicsNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BoldPackage.Literals.ITALICS_NODE__TEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BoldPackage.Literals.ITALICS_NODE__TEST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItalicsNodeAccess().getTestTEXT_TTerminalRuleCall_2_0(), semanticObject.getTest());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Paragraph returns Paragraph
	 *
	 * Constraint:
	 *     nodes+=Node*
	 */
	protected void sequence_Paragraph(ISerializationContext context, Paragraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns PlainTextNode
	 *     PlainTextNode returns PlainTextNode
	 *
	 * Constraint:
	 *     text=TEXT_T
	 */
	protected void sequence_PlainTextNode(ISerializationContext context, PlainTextNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BoldPackage.Literals.PLAIN_TEXT_NODE__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BoldPackage.Literals.PLAIN_TEXT_NODE__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlainTextNodeAccess().getTextTEXT_TTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Text returns Text
	 *
	 * Constraint:
	 *     paragraphs+=Paragraph*
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

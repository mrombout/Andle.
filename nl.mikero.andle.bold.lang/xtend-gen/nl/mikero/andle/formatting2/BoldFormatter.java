/**
 * generated by Xtext 2.13.0
 */
package nl.mikero.andle.formatting2;

import Bold.Node;
import Bold.Paragraph;
import Bold.Text;
import com.google.inject.Inject;
import java.util.Arrays;
import nl.mikero.andle.services.BoldGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class BoldFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BoldGrammarAccess _boldGrammarAccess;
  
  protected void _format(final Text text, @Extension final IFormattableDocument document) {
    EList<Paragraph> _paragraphs = text.getParagraphs();
    for (final Paragraph paragraph : _paragraphs) {
      document.<Paragraph>format(paragraph);
    }
  }
  
  protected void _format(final Paragraph paragraph, @Extension final IFormattableDocument document) {
    EList<Node> _nodes = paragraph.getNodes();
    for (final Node node : _nodes) {
      document.<Node>format(node);
    }
  }
  
  public void format(final Object paragraph, final IFormattableDocument document) {
    if (paragraph instanceof XtextResource) {
      _format((XtextResource)paragraph, document);
      return;
    } else if (paragraph instanceof Paragraph) {
      _format((Paragraph)paragraph, document);
      return;
    } else if (paragraph instanceof Text) {
      _format((Text)paragraph, document);
      return;
    } else if (paragraph instanceof EObject) {
      _format((EObject)paragraph, document);
      return;
    } else if (paragraph == null) {
      _format((Void)null, document);
      return;
    } else if (paragraph != null) {
      _format(paragraph, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(paragraph, document).toString());
    }
  }
}

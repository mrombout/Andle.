/*
 * generated by Xtext 2.13.0
 */
grammar InternalCode;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nl.mikero.andle.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.mikero.andle.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nl.mikero.andle.services.CodeGrammarAccess;

}
@parser::members {
	private CodeGrammarAccess grammarAccess;

	public void setGrammarAccess(CodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleScript
entryRuleScript
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScriptAccess().getGroup()); }
		(rule__Script__Group__0)
		{ after(grammarAccess.getScriptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetSwitch
entryRuleSetSwitch
:
{ before(grammarAccess.getSetSwitchRule()); }
	 ruleSetSwitch
{ after(grammarAccess.getSetSwitchRule()); } 
	 EOF 
;

// Rule SetSwitch
ruleSetSwitch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetSwitchAccess().getGroup()); }
		(rule__SetSwitch__Group__0)
		{ after(grammarAccess.getSetSwitchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBranch
entryRuleBranch
:
{ before(grammarAccess.getBranchRule()); }
	 ruleBranch
{ after(grammarAccess.getBranchRule()); } 
	 EOF 
;

// Rule Branch
ruleBranch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBranchAccess().getGroup()); }
		(rule__Branch__Group__0)
		{ after(grammarAccess.getBranchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBoolean
entryRuleEBoolean
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
		(rule__EBoolean__Alternatives)
		{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSetSwitchParserRuleCall_0()); }
		ruleSetSwitch
		{ after(grammarAccess.getStatementAccess().getSetSwitchParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBranchParserRuleCall_1()); }
		ruleBranch
		{ after(grammarAccess.getStatementAccess().getBranchParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__0__Impl
	rule__Script__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getScriptAction_0()); }
	()
	{ after(grammarAccess.getScriptAccess().getScriptAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getStatementsAssignment_1()); }
	(rule__Script__StatementsAssignment_1)*
	{ after(grammarAccess.getScriptAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetSwitch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSwitch__Group__0__Impl
	rule__SetSwitch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSwitchAccess().getSetSwitchAction_0()); }
	()
	{ after(grammarAccess.getSetSwitchAccess().getSetSwitchAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSwitch__Group__1__Impl
	rule__SetSwitch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSwitchAccess().getSetKeyword_1()); }
	'set'
	{ after(grammarAccess.getSetSwitchAccess().getSetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSwitch__Group__2__Impl
	rule__SetSwitch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSwitchAccess().getSwitchNameAssignment_2()); }
	(rule__SetSwitch__SwitchNameAssignment_2)
	{ after(grammarAccess.getSetSwitchAccess().getSwitchNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSwitch__Group__3__Impl
	rule__SetSwitch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSwitchAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getSetSwitchAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSwitch__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSwitchAccess().getSwitchStateAssignment_4()); }
	(rule__SetSwitch__SwitchStateAssignment_4)
	{ after(grammarAccess.getSetSwitchAccess().getSwitchStateAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Branch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__0__Impl
	rule__Branch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getBranchAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__1__Impl
	rule__Branch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getBranchAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__2__Impl
	rule__Branch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getExpressionAssignment_2()); }
	(rule__Branch__ExpressionAssignment_2)
	{ after(grammarAccess.getBranchAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__3__Impl
	rule__Branch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getBranchAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__4__Impl
	rule__Branch__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getBranchAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__5__Impl
	rule__Branch__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBranchAccess().getIfTrueAssignment_5()); }
		(rule__Branch__IfTrueAssignment_5)
		{ after(grammarAccess.getBranchAccess().getIfTrueAssignment_5()); }
	)
	(
		{ before(grammarAccess.getBranchAccess().getIfTrueAssignment_5()); }
		(rule__Branch__IfTrueAssignment_5)*
		{ after(grammarAccess.getBranchAccess().getIfTrueAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__6__Impl
	rule__Branch__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getBranchAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getGroup_7()); }
	(rule__Branch__Group_7__0)?
	{ after(grammarAccess.getBranchAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Branch__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_7__0__Impl
	rule__Branch__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getElseKeyword_7_0()); }
	'else'
	{ after(grammarAccess.getBranchAccess().getElseKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_7__1__Impl
	rule__Branch__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getLeftCurlyBracketKeyword_7_1()); }
	'{'
	{ after(grammarAccess.getBranchAccess().getLeftCurlyBracketKeyword_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_7__2__Impl
	rule__Branch__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getIfFalseAssignment_7_2()); }
	(rule__Branch__IfFalseAssignment_7_2)*
	{ after(grammarAccess.getBranchAccess().getIfFalseAssignment_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_7__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group_7__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group_7__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getRightCurlyBracketKeyword_7_3()); }
	'}'
	{ after(grammarAccess.getBranchAccess().getRightCurlyBracketKeyword_7_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Script__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getScriptAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__SwitchNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSwitchAccess().getSwitchNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getSetSwitchAccess().getSwitchNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSwitch__SwitchStateAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSwitchAccess().getSwitchStateEBooleanParserRuleCall_4_0()); }
		ruleEBoolean
		{ after(grammarAccess.getSetSwitchAccess().getSwitchStateEBooleanParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAccess().getExpressionEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getBranchAccess().getExpressionEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__IfTrueAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAccess().getIfTrueStatementParserRuleCall_5_0()); }
		ruleStatement
		{ after(grammarAccess.getBranchAccess().getIfTrueStatementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__IfFalseAssignment_7_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAccess().getIfFalseStatementParserRuleCall_7_2_0()); }
		ruleStatement
		{ after(grammarAccess.getBranchAccess().getIfFalseStatementParserRuleCall_7_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

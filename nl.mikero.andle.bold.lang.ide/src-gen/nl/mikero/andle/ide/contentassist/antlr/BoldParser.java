/*
 * generated by Xtext 2.13.0
 */
package nl.mikero.andle.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import nl.mikero.andle.ide.contentassist.antlr.internal.InternalBoldParser;
import nl.mikero.andle.services.BoldGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BoldParser extends AbstractContentAssistParser {

	@Inject
	private BoldGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBoldParser createParser() {
		InternalBoldParser result = new InternalBoldParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getTextAccess().getGroup(), "rule__Text__Group__0");
					put(grammarAccess.getParagraphAccess().getGroup(), "rule__Paragraph__Group__0");
					put(grammarAccess.getEmphasisNodeAccess().getGroup(), "rule__EmphasisNode__Group__0");
					put(grammarAccess.getItalicsNodeAccess().getGroup(), "rule__ItalicsNode__Group__0");
					put(grammarAccess.getPlainTextNodeAccess().getGroup(), "rule__PlainTextNode__Group__0");
					put(grammarAccess.getTextAccess().getParagraphsAssignment_1(), "rule__Text__ParagraphsAssignment_1");
					put(grammarAccess.getParagraphAccess().getNodesAssignment_1(), "rule__Paragraph__NodesAssignment_1");
					put(grammarAccess.getEmphasisNodeAccess().getTextAssignment_2(), "rule__EmphasisNode__TextAssignment_2");
					put(grammarAccess.getItalicsNodeAccess().getTestAssignment_2(), "rule__ItalicsNode__TestAssignment_2");
					put(grammarAccess.getPlainTextNodeAccess().getTextAssignment_1(), "rule__PlainTextNode__TextAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BoldGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BoldGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
